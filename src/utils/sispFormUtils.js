const { sha512ToBase64 } = require('../utils/hashFunctions');

/**
 * GENERATE REQUEST FORM FINGERPRINT
 * @param {String} posAutCode - Required - The POS auth code. This is the credential provided by SISP that is used to construct this class.
 * @param {String} timestamp - Required - The timestamp of the transaction response.
 * @param {Number} amount - Required - The transaction amount.
 * @param {String} merchantRef - Required - The payment reference.
 * @param {String} merchantSession - Required - It identifies the customer's session on the merchant portal. It must be generated by the merchant's system.
 * @param {String} posID - Required - Identifies the merchant's virtual terminal on the vinti4 network. It must be generated by SISP and assigned to the merchant.
 * @param {String} currency - Required - Transaction currency code. It must always be filled in with the value “132”, Cape Verde Escudos, according to ISO 4217.
 * @param {String} transactionCode - Required - Indicates the type of transaction being initiated.
 * @param {String} entityCode - Required - Service Entity Code (if Service Payment or Recharge).
 * @param {String} referenceNumber - Required - Service reference that you intend to pay (if it is Service Payment or Recharge).
 * @param {String} token - Required - This field contains the digit sequences that represent the card.
 * @returns {String} response - The generated fingerprint (e.g. "eZ5/kTpA9RvrhwvmYUNnoYDKuixMkOn5xegfkDZXZigDPH7dV5JlAE/So/OFs9x9yn4W/TCWASWqvcIYDp0ovw==")
 */
const generateFingerprint = (
  posAutCode,
  timestamp,
  amount,
  merchantRef,
  merchantSession,
  posID,
  currency,
  transactionCode,
  entityCode,
  referenceNumber,
  token
) => {
  let toHash = `${sha512ToBase64(posAutCode) + timestamp + (Number(parseFloat(amount) * 1000))}${merchantRef}${merchantSession.trim()}${posID}${currency.trim()}${transactionCode.trim()}`;

  if (entityCode) {
    toHash += Number(entityCode.trim());
  }
  if (referenceNumber) {
    toHash += Number(referenceNumber.trim());
  }

  if (token) {
    toHash += token.trim();
  }

  return sha512ToBase64(toHash);
};

/**
 * GENERATE CARD PAYMENT RESPONSE FINGERPRINT
 * @param {String} posAutCode - Required - The POS auth code. This is the credential provided by SISP that is used to construct this class.
 * @param {String} messageType - Required - The message type
 * @param {String} clearingPeriod - Required - The period in which the transaction took place.
 * @param {String} transactionID - Required - The transaction Identifier, together with the clearingPeriod they uniquely identify a transaction on the vinti4 network.
 * @param {String} merchantReference - Required - The payment reference.
 * @param {String} merchantSession - Required - It identifies the customer's session on the merchant portal. It must be generated by the merchant's system.
 * @param {Number} amount - Required - The transaction amount.
 * @param {String} messageID - Required - The message identifier generated for the transaction.
 * @param {String} merchantResponse - Required - Transaction response code. Together with the messageType it indicates the success or failure of the transaction.
 * @param {String} pan - Required - This field is truncated in the following format ***********1234, where: “1234” is the last 4 digits of the PAN.
 * @param {String} timestamp - Required - The timestamp of the transaction response.
 * @param {String} reference - Required - Service reference that you intend to pay (if it is Service Payment or Recharge).
 * @param {String} entity - Required - Service Entity Code (if Service Payment or Recharge).
 * @param {String} clientReceipt - Required - Transaction receipt (if Service Payment or Recharge).
 * @param {String} additionalErrorMessage - Required - Error message that must be presented to the customer (only in error cases).
 * @param {String} reloadCode - Required - Reload Code. This field is filled to zero when a recharge operation is carried out in RealTime
 * @returns {String} response - The generated fingerprint (e.g. "eZ5/kTpA9RvrhwvmYUNnoYDKuixMkOn5xegfkDZXZigDPH7dV5JlAE/So/OFs9x9yn4W/TCWASWqvcIYDp0ovw==")
 */
const generateCardPaymentResponseFingerprint = (
  posAutCode,
  messageType,
  clearingPeriod,
  transactionID,
  merchantReference,
  merchantSession,
  amount,
  messageID,
  pan,
  merchantResponse,
  timestamp,
  reference,
  entity,
  clientReceipt,
  additionalErrorMessage,
  reloadCode
) => {
  let token = '';
  token += sha512ToBase64(posAutCode);

  if (messageType) {
    token += messageType.trim();
  }

  if (clearingPeriod) {
    token += clearingPeriod.replace(/ /g, '');
  }

  if (transactionID) {
    token += transactionID.replace(/ /g, '');
  }

  if (merchantReference) {
    token += merchantReference.trim();
  }

  if (merchantSession) {
    token += merchantSession.trim();
  }

  if (amount) {
    token += Math.trunc(amount * 1000);
  }

  if (messageID) {
    token += messageID.trim();
  }

  if (pan) {
    token += pan.trim();
  }

  if (merchantResponse) {
    token += merchantResponse.trim();
  }

  token += timestamp;

  if (reference) {
    token += Number(reference.trim());
  }

  if (entity) {
    token += Number(entity.trim());
  }

  if (clientReceipt) {
    token += clientReceipt.trim();
  }

  if (additionalErrorMessage) {
    token += additionalErrorMessage.trim();
  }

  if (reloadCode) {
    token += reloadCode.trim();
  }

  return sha512ToBase64(token);
};

module.exports = {
  generateFingerprint,
  generateCardPaymentResponseFingerprint
}
